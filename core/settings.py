"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import io
from pathlib import Path
import secrets

import environ
from google.cloud import secretmanager


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

PROJECT_NAME = 'bros files'
_PROJECT_NAME = ''.join(PROJECT_NAME.split())

ENV = environ.Env()

ENV_FILE_NAME = ENV.get_value('BF_ENV_NAME', default='.env')
ENV_FILE_PATH = BASE_DIR / str(ENV_FILE_NAME)


# Local environ from ENV_FILE_PATH
if Path(ENV_FILE_PATH).exists():
    ENV.read_env(ENV_FILE_PATH)


# Google
GOOGLE_CLOUD_PROJECT = ENV.get_value('GOOGLE_CLOUD_PROJECT', default=None)
TRAMPOLINE_CI = ENV.get_value('TRAMPOLINE_CI', default=None)


# Test environ
if TRAMPOLINE_CI and not GOOGLE_CLOUD_PROJECT:
    # CI environ
    placeholder = (
        f'BF_SECRET_KEY=some-secret-value\n'
        'GS_BUCKET_NAME=None\n'
        'BF_ALLOWED_HOSTS=*\n'
        'BF_DEBUG=True\n'
    )

    ENV.read_env(io.StringIO(placeholder))


# [Secrets]
# Secrets overwrite values
# Local secrets
ENV_SECRETS_FILE_NAME = ENV.get_value('BF_SECRETS_ENV_NAME', default=None)


if ENV_SECRETS_FILE_NAME:
    ENV_SECRETS_FILE_PATH = BASE_DIR / str(ENV_SECRETS_FILE_NAME)

    ENV.read_env(ENV_SECRETS_FILE_PATH)


if GOOGLE_CLOUD_PROJECT and not TRAMPOLINE_CI:
    # Google secret manager environ
    settings_name = ENV.get_value('BF_SETTINGS_NAME', default='django_settings')

    client = secretmanager.SecretManagerServiceClient()
    name = 'projects/%s/secrets/%s/versions/latest' % (GOOGLE_CLOUD_PROJECT, settings_name)
    payload = client.access_secret_version(name=name).payload.data.decode('UTF-8')

    ENV.read_env(io.StringIO(payload), overwrite=True)
# [/Secrets]
# [/Custom]


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = ENV.get_value('BF_SECRET_KEY')


# By default, always run in production mode
DEBUG = ENV.get_value('BF_DEBUG', default=False, cast=bool)

ALLOWED_HOSTS = ENV.get_value('BF_ALLOWED_HOSTS', cast=list)


if GOOGLE_CLOUD_PROJECT:
    SECURE_SSL_REDIRECT = True
    CSRF_TRUSTED_ORIGINS = ALLOWED_HOSTS
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')


##################
# AUTHENTICATION #
##################
AUTH_USER_MODEL = 'accounts.User'


# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'accounts',
    'base',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
if not TRAMPOLINE_CI:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': _PROJECT_NAME,
            'USER': _PROJECT_NAME,
            'PASSWORD': ENV.get_value('BF_PSQL_PASSWORD'),
            'HOST': ENV.get_value('BF_PSQL_HOST'),
            'PORT': ENV.get_value('BF_PSQL_PORT', default='5432'),
        },
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': _PROJECT_NAME,
        },
    }


# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
if GOOGLE_CLOUD_PROJECT and not TRAMPOLINE_CI:
    GS_BUCKET_NAME = ENV.get_value('GS_BUCKET_NAME')
    GS_DEFAULT_ACL = 'publicRead'

    DEFAULT_FILE_STORAGE = 'utils.storages.GoogleCloudStorage'
    STATICFILES_STORAGE = 'utils.storages.GoogleCloudStorageStatic'

    MEDIA_URL = 'https://storage.googleapis.com/%s/' % GS_BUCKET_NAME
    STATIC_URL = 'https://storage.googleapis.com/static/%s/' % GS_BUCKET_NAME
else:
    STATIC_URL = '/static/'
    STATIC_ROOT = str(BASE_DIR / 'static/')

    MEDIA_URL = '/media/'
    MEDIA_ROOT = str(BASE_DIR / 'media/')


# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# [CEO]
PROJECT_BUILD_HASH = secrets.token_hex(nbytes=16)
PROJECT_TITLE = ''.join(_i.capitalize() for _i in PROJECT_NAME.split())
PROJECT_DESCRIPTION = '%s is a free file storage' % PROJECT_TITLE
PROJECT_URL = ''
PROJECT_KEYWORDS = 'free, files, storage'
if DEBUG:
    PROJECT_ROBOTS = 'none, noarchive'
else:
    PROJECT_ROBOTS = 'index'
# [/CEO]
